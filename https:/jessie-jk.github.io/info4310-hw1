<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <style>

      #svg {
        margin-left:auto;
        margin-right:auto;
        display:block;
        margin-top:100px;
      }
        #sliderInput {
        width : 260px;
      }

     .gridlines line {
        stroke: #bbb;
      }

      .gridlines .domain {
         stroke: none;
      } 
    </style>
    <title> Number of Trees Planted in San Francisco over Decades </title>
  </head>

  <body>

    <svg id="svg" height="500" width="800"> </svg>
  
    <script>

// ************ Part A: Filter data ************

      // 0. bring the data 
      const svg= d3.select("svg#svg");
      d3.csv("Street_Tree_List-2022-01-30_FILTERED.csv").then(data => {

      console.log(data);
      console.log("ORIGINAL : " + data.length);

      // 1. filter out data that does not have a PlantDate=""
      data = data.filter( (d) => { return (d['PlantDate'] != "") ; });

      console.log(data);
      console.log("AFTER FILTER : " + data.length);    
      
      var year = []

      // 2. store the year of the data PlantDate = "7/11/00 0:00"
      data.forEach( (d, i) => {
        year.push(d['PlantDate']);
      }); 

      const parseTime = d3.timeParse("%m/%d/%y %H:%M");

      for (let i = 0; i < year.length; i++) { 
        year[i] = parseTime(year[i]);
        year[i] = year[i].getFullYear();
      }
      
      console.log("BEFORE YEAR FILTER : " + year.length);    

      // 3. filter out any invalid data 
      for (let i = 0; i < year.length; i++) { 
        if (year[i] > 2022 || year[i] < 1960) {
         year.splice(i, 1)
        }     
      }

      console.log("AFTER YEAR FILTER : " + year.length);    

      // 4. create a dictionary of year:number of plants

      var dict = {};

      dict["2020"] = 0;
      dict["2010"] = 0;
      dict["2000"] = 0;
      dict["1990"] = 0;
      dict["1980"] = 0;
      dict["1970"] = 0;
      dict["1960"] = 0;

      for (let i = 0; i < year.length; i++) { 
        if (year[i] > 2019 ) {
          dict["2020"] += 1
        } else if (year[i] > 2009) {
          dict["2010"] += 1
        } else if (year[i] > 1999) {
          dict["2000"] += 1
        } else if (year[i] > 1989) {
          dict["1990"] += 1
        } else if (year[i] > 1979) {
          dict["1980"] += 1
        } else if (year[i] > 1969) {
          dict["1970"] += 1
        } else {
          dict["1960"] += 1
        }  
      } 

    console.log(dict);

      // 5. final data set list of dictionaries with year:num
      var dataFinal = []

      for (let i = 0; i < 7; i++) { 
        var dictFinal = {};
        dictFinal["year"] = Object.keys(dict)[i]
        dictFinal["num"] = Object.values(dict)[i]
        console.log(dictFinal);
        dataFinal.push(dictFinal)
      }
  
      console.log("THE FINAL DATA : " + dataFinal);

      // console.log( dict["num2000"] + dict["num1990"] + dict["num1980"] + dict["num1970"] +  dict["num1960"] );

// ************ Part B: Axis, Scale, Gridlines ************

      // 0. setup svg 
      const svg = d3.select("svg#svg"); //.style("background", "grey")

      const width = svg.attr("width");
      const height = svg.attr("height");
      const margin = {"top":50, "bottom":80, "right":100, "left":120};
      const plotWidth = width - margin.right - margin.left;
      const plotHeight = height - margin.top - margin.bottom;    

      // 1. extent
      const yearExtent = d3.extent(Object.keys(dict));
      //console.log(yearExtent);
    
      const numExtent = d3.extent(Object.values(dict));
      //console.log(nunExtent);

      // 2. scale 
        // domain = accepts input between 0 and 10 (the domain) and maps it to output between 0 and 600 (the range).
      const yearScale = d3.scaleLinear().domain(yearExtent).range([10, plotWidth]); 
      const numScale = d3.scaleLinear().domain(numExtent).range([plotHeight, 0]); 

      // 3. axis & gridlines
      let leftAxis = d3.axisLeft (numScale);
      let leftGridLines = d3.axisLeft(numScale).tickFormat("").tickSize(-plotWidth-10);
     
      svg.append("g")
          .attr("class", "axis")
          .attr("transform", "translate("+(margin.left-10)+" , "+(margin.top)+")")
          .style("font-size", "18px") 
          .call(leftAxis);

      svg.append("g")
        .attr("class", "gridlines")
        .attr("transform", "translate("+(margin.left-10)+" , "+(margin. top)+")")
        .call(leftGridLines);

      let bottomAxis = d3.axisBottom(yearScale).tickFormat(d3.format("d"));
      let bottomGridLines = d3.axisBottom(yearScale).tickFormat("").tickSize(-plotHeight-10);

      svg.append("g")
            .attr("class", "axis")
            .attr("transform", "translate("+(margin.left)+" , "+(plotHeight + margin.top + 10)+")")
            .style("font-size", "18px") 
            .call(bottomAxis.ticks(5).tickFormat(function(d) {
              return d + "s";
            }));
            

      svg.append("g")
          .attr("class", "gridlines")
          .attr("transform", "translate("+(margin.left)+" , "+(margin.top + plotHeight + 10)+")")
          .call(bottomGridLines);

// ************ Part C : Plot DATA ************
     
      // plot circles 
      let plot = svg.append("g")
        .attr("id","plot")
        .attr("transform", "translate("+(margin.left)+","+margin.top+")");

      plot.selectAll("circle")
        .data(dataFinal)
        .enter()
        .append("circle")
        .attr("r", 6)
        .attr("fill", "green")
        .attr("cx", (d) => yearScale(d.year))
        .attr("cy", (d) => numScale(d.num));

      // line generator
      var lineGen = d3.line()
                  .x( d => yearScale(d['year'])) 
                  .y( d => numScale(d['num']) )

      plot.append("path").datum(dataFinal)
        .attr("class", "line")
        .attr('d',lineGen)
        .attr("fill", "none")
        .attr("stroke", "green")
        .attr("stroke-width", 6);
   
      //axis label
      svg.append("text")
          .attr("x", (width / 2))             
          .attr("y", 15)
          .attr("text-anchor", "middle")  
          .style("font-size", "20px") 
          .style("font-weight", "bold") 
          .attr("font-family", "Helvetica")
          .text("Number of Trees Planted in San Francisco over Decades");

      svg.append('text')
          .attr('x', width/2 + 10 )
          .attr('y', height - 10)
          .attr('text-anchor', 'middle')
          .style("font-size", "20px") 
          .attr("font-family", "Helvetica")
          .text('Decades');

      svg.append("text")
      .attr("text-anchor", "middle")
      .attr("x", -height/2 + 10)  
      .attr("dy", "1.20em")
      .attr("transform", "rotate(-90)")
      .style("font-size", "20px") 
      .attr("font-family", "Helvetica")
      .text("Number of Trees");
    });


    </script>


  </body>
  </html>
  
